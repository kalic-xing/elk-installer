services:
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:${STACK_VERSION:-9.0.1}
    deploy:
      resources:
        limits:
          memory: 1g
    networks:
      - elk
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - type: volume
        source: elasticsearch-data
        target: /usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "curl -sX GET -u elastic:${ELASTIC_PASSWORD} 'http://elasticsearch:9200' | grep 'You Know, for Search' || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  elasticsearch-setup:
    image: alpine:latest
    container_name: elasticsearch-setup
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - type: bind
        source: ./config/es-setup.sh
        target: /es-setup.sh
    networks:
      - elk
    command: ["sh", "/es-setup.sh"]
    restart: "no"

  kibana:
    image: kibana:${STACK_VERSION:-9.0.1}
    container_name: kibana
    deploy:
      resources:
        limits:
          memory: 1g
    environment:
     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=a7a6311933d3503b89bc2dbc0b1234567890abcdef1234567890abcdef123456
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    ports:
      - ${KIBANA_PORT:-5601}:5601
    depends_on:
      elasticsearch-setup:
        condition: service_completed_successfully
    networks:
      - elk
    volumes:
      - type: volume
        source: kibana-data
        target: /usr/share/kibana/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://kibana:5601/api/status | grep 'available' || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  kibana-setup:
    image: alpine:latest
    container_name: kibana-setup
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - type: bind
        source: ./config/kb-setup.sh
        target: /kb-setup.sh
      - type: bind
        source: ./tokens
        target: /tokens     
    command: ["sh", "/kb-setup.sh"]
    networks:
      - elk
    depends_on:
      kibana:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/tokens/enrollment_tokens.txt"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 5s

  elastic-agent:
    image: docker.elastic.co/elastic-agent/elastic-agent:${STACK_VERSION:-9.0.1}
    container_name: elastic-agent
    user: root
    deploy:
      resources:
        limits:
          memory: 1g
    volumes:
      - type: bind
        source: ./tokens
        target: /tokens
      - type: bind
        source: ./config/fleet-startup.sh
        target: /fleet-startup.sh
    entrypoint: ["bash", "/fleet-startup.sh"]
    networks:
      - elk
    ports:
      - "8220:8220"
    depends_on:
      kibana-setup:
        condition: service_completed_successfully        
    healthcheck:
      test: ["CMD-SHELL", "/usr/share/elastic-agent/elastic-agent status --output yaml | grep -q 'state: 2' || exit 1"]
      interval: 10s
      retries: 5
      start_period: 60s
      timeout: 5s

volumes:
  elasticsearch-data:
    name: elasticsearch-data
  kibana-data:
    name: kibana-data

networks:
  elk:
    driver: bridge
    name: elk